{"ast":null,"code":"import _classCallCheck from \"G:\\\\ITI\\\\React\\\\ReduxLab\\\\ContextLab\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"G:\\\\ITI\\\\React\\\\ReduxLab\\\\ContextLab\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"G:\\\\ITI\\\\React\\\\ReduxLab\\\\ContextLab\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"G:\\\\ITI\\\\React\\\\ReduxLab\\\\ContextLab\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"G:\\\\ITI\\\\React\\\\ReduxLab\\\\ContextLab\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"G:\\\\ITI\\\\React\\\\ReduxLab\\\\ContextLab\\\\app\\\\src\\\\ToDoList\\\\components\\\\Completed\\\\list.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { GetsData } from './../../actions/tasks';\n\nvar CompletedList =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(CompletedList, _React$PureComponent);\n\n  function CompletedList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CompletedList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CompletedList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.deleteItem = function (id) {\n      var items = _this.props.data.filter(function (item) {\n        if (item.id === id) {\n          item['isDeleted'] = true;\n          return item;\n        } else {\n          return item;\n        }\n      });\n\n      _this.props.setData(items);\n    };\n\n    _this.RedoItem = function (e) {\n      var items = _this.props.data.filter(function (item) {\n        var id = e.target.dataset.id;\n\n        if (item.id === id) {\n          item['isCompleted'] = false;\n          return item;\n        } else {\n          return item;\n        }\n      });\n\n      _this.props.setData(items);\n    };\n\n    return _this;\n  }\n\n  _createClass(CompletedList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var CompletedData = this.props.CompletedData;\n      console.log(this.props.CompletedData); // debugger\n\n      var CompleteItems = CompletedData.map(function (item) {\n        return React.createElement(\"div\", {\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"name \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, item.name), React.createElement(\"span\", {\n          className: \"action2 icon\",\n          \"data-id\": item.id,\n          onClick: _this2.RedoItem,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, \"\\u221A\"), React.createElement(\"span\", {\n          className: \"action2 icon\",\n          onClick: function onClick() {\n            return _this2.deleteItem(item.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, \"\\xD7\"));\n      });\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"completedList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"name title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Complete\"), React.createElement(\"span\", {\n        className: \"action2 title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Redo\"), React.createElement(\"span\", {\n        className: \"action2 title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Delete\"), CompleteItems));\n    }\n  }]);\n\n  return CompletedList;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    data: state.items,\n    CompletedData: state.items.filter(function (item) {\n      return item.isCompleted && !item.isDeleted;\n    })\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setData: function setData(data) {\n      return dispatch(GetsData(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CompletedList);","map":{"version":3,"sources":["G:\\ITI\\React\\ReduxLab\\ContextLab\\app\\src\\ToDoList\\components\\Completed\\list.js"],"names":["React","connect","GetsData","CompletedList","deleteItem","id","items","props","data","filter","item","setData","RedoItem","e","target","dataset","CompletedData","console","log","CompleteItems","map","name","PureComponent","mapStateToProps","state","isCompleted","isDeleted","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,uBAAzB;;IAEMC,a;;;;;;;;;;;;;;;;;;UAEFC,U,GAAa,UAACC,EAAD,EAAQ;AACjB,UAAIC,KAAK,GAAG,MAAKC,KAAL,CAAWC,IAAX,CAAgBC,MAAhB,CAAuB,UAAAC,IAAI,EAAI;AACvC,YAAGA,IAAI,CAACL,EAAL,KAAYA,EAAf,EAAkB;AACdK,UAAAA,IAAI,CAAC,WAAD,CAAJ,GAAoB,IAApB;AACA,iBAAOA,IAAP;AACH,SAHD,MAGK;AACD,iBAAOA,IAAP;AACH;AACJ,OAPW,CAAZ;;AAUA,YAAKH,KAAL,CAAWI,OAAX,CAAmBL,KAAnB;AACH,K;;UAEDM,Q,GAAW,UAACC,CAAD,EAAO;AACd,UAAIP,KAAK,GAAG,MAAKC,KAAL,CAAWC,IAAX,CAAgBC,MAAhB,CAAuB,UAAAC,IAAI,EAAI;AACvC,YAAML,EAAE,GAAGQ,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiBV,EAA5B;;AACA,YAAIK,IAAI,CAACL,EAAL,KAAYA,EAAhB,EAAoB;AAChBK,UAAAA,IAAI,CAAC,aAAD,CAAJ,GAAsB,KAAtB;AACA,iBAAOA,IAAP;AACH,SAHD,MAGO;AACH,iBAAOA,IAAP;AACH;AACJ,OARW,CAAZ;;AAWA,YAAKH,KAAL,CAAWI,OAAX,CAAmBL,KAAnB;AAEH,K;;;;;;;6BAEQ;AAAA;;AAAA,UACGU,aADH,GACqB,KAAKT,KAD1B,CACGS,aADH;AAELC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAL,CAAWS,aAAvB,EAFK,CAGL;;AACA,UAAMG,aAAa,GACfH,aAAa,CAACI,GAAd,CAAkB,UAAAV,IAAI,EAAI;AACtB,eACI;AAAK,UAAA,GAAG,EAAEA,IAAI,CAACL,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAM,UAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBK,IAAI,CAACW,IAA9B,CADJ,EAEI;AAAM,UAAA,SAAS,EAAC,cAAhB;AAA+B,qBAASX,IAAI,CAACL,EAA7C;AAAiD,UAAA,OAAO,EAAE,MAAI,CAACO,QAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAGI;AAAM,UAAA,SAAS,EAAC,cAAhB;AAA+B,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACR,UAAL,CAAgBM,IAAI,CAACL,EAArB,CAAN;AAAA,WAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,CADJ;AASH,OAVD,CADJ;AAcA,aACI,0CACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGI;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,EAIKc,aAJL,CADJ,CADJ;AAaH;;;;EA/DuBnB,KAAK,CAACsB,a;;AAmElC,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACHhB,IAAAA,IAAI,EAAEgB,KAAK,CAAClB,KADT;AAEHU,IAAAA,aAAa,EAAEQ,KAAK,CAAClB,KAAN,CAAYG,MAAZ,CAAmB,UAAAC,IAAI;AAAA,aAAKA,IAAI,CAACe,WAAL,IAAoB,CAACf,IAAI,CAACgB,SAA/B;AAAA,KAAvB;AAFZ,GAAP;AAIH,CALD;;AAQA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACpCjB,IAAAA,OAAO,EAAE,iBAAAH,IAAI;AAAA,aAAIoB,QAAQ,CAAC1B,QAAQ,CAACM,IAAD,CAAT,CAAZ;AAAA;AADuB,GAAL;AAAA,CAAnC;;AAKA,eAAeP,OAAO,CAACsB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CxB,aAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { GetsData } from './../../actions/tasks';\r\n\r\nclass CompletedList extends React.PureComponent {\r\n\r\n    deleteItem = (id) => {\r\n        let items = this.props.data.filter(item => {\r\n            if(item.id === id){\r\n                item['isDeleted'] = true;\r\n                return item;\r\n            }else{\r\n                return item;\r\n            }    \r\n        }\r\n\r\n        )\r\n        this.props.setData(items);\r\n    }\r\n\r\n    RedoItem = (e) => {\r\n        let items = this.props.data.filter(item => {\r\n            const id = e.target.dataset.id\r\n            if (item.id === id) {\r\n                item['isCompleted'] = false;\r\n                return item;\r\n            } else {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        )\r\n        this.props.setData(items);\r\n\r\n    }\r\n\r\n    render() {\r\n        const { CompletedData } = this.props;\r\n        console.log(this.props.CompletedData)\r\n        // debugger\r\n        const CompleteItems = (\r\n            CompletedData.map(item => {\r\n                return (\r\n                    <div key={item.id}>\r\n                        <span className=\"name \">{item.name}</span>\r\n                        <span className=\"action2 icon\" data-id={item.id} onClick={this.RedoItem}>&radic;</span>\r\n                        <span className=\"action2 icon\" onClick={() => this.deleteItem(item.id)}>&times;</span>\r\n\r\n                    </div>\r\n                )\r\n\r\n            })\r\n        )\r\n\r\n        return (\r\n            <>\r\n                <div className=\"completedList\">\r\n                    <span className=\"name title\">Complete</span>\r\n                    <span className=\"action2 title\">Redo</span>\r\n                    <span className=\"action2 title\">Delete</span>\r\n                    {CompleteItems}\r\n                </div>\r\n\r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        data: state.items,\r\n        CompletedData: state.items.filter(item => (item.isCompleted && !item.isDeleted))\r\n    }\r\n};\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setData: data => dispatch(GetsData(data)),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CompletedList);\r\n\r\n"]},"metadata":{},"sourceType":"module"}